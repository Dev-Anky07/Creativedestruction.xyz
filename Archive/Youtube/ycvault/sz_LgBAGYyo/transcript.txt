[ 0:00:00.000 ---> 0:33:05.000 ] Speaker A : All right. So when I talk about making products users love, what I mean specifically is like, how do we make things that has a passionate user base that our users are unconditionally, wanting it to be successful both on the products that we build, but also the companies behind them? We're going to go over tons of information. Try not to take too many notes. Mostly just try to listen. I'll post a link to the slides on my Twitter account, and on that link there will be a ways for you to annotate the slides and you can ask me questions. And so if we don't get to them, I'll answer them after the talk. So you guys have been listening to and hearing a lot about growth over the last several weeks, and to me I feel like growth is usually fairly simple. It's the interaction between two sort of concepts or variables, conversion rate and churn, right. And the gap between those two things pretty much indicate how fast you're going to grow. Most people, especially business type people, tend to look at this interaction in terms of a very calculated and a mathematical sort of way. And today I sort of want to talk about these things at a more human scale. Right. Because at a startup, when you're interacting with your users, you have a fairly intimate interaction that you have in the early stages. And so I think there's a different way of looking at this stuff in terms of how we build our products and we'll look at a lot of different examples of that and how it's executed. Well, my philosophy behind a lot of things that I teach startups is the best way to get to sort of a billion dollars is to focus on the values that help you get that first dollar to acquire that first user. If you sort of get that right, everything else will sort of take care of itself. It's a sort of faith thing. So I came to be a partner at YC by way of being an alumni. I went through the program in winter of 2006. It was the second ever program, and I built a product called Woofu. Woofu is an online form builder, helps you create contact forms and online surveys and simple payment forms. It's basically a database app that looks like it's designed by Fisher Price. What's interesting, though, is that because it was fairly easy to use, we had customers from every industry, market and vertical you can think of, including a majority of the Fortune 500 companies out there. Ran that company for five years. And then we're acquired by SurveyMonkey in 2013. And at the time we're a very interesting acquisition. We were only a team of ten people at the time. And while we acquired funding out here in Silicon Valley through Y Combinator, we actually ran the company from Florida. We had no office, everyone worked from home. And we're an interesting outlier. So each dot here represents a startup that exited through IPO or acquisition. And we're this outlier to the left. The bottom is the funding amount they took and the vertical axis is the valuation of the company at the time. To sum it up, the average startup raises about $25 million and their return to their investors about 676%. Wufu raised about $118,000 total and our return to our investors about 29,000%. So a lot of people were very interested in sort of like, what makes Wufu a little bit different or how do we run the company very differently? And a lot of it was focused on product. We weren't interested in building software that I guess that just people wanted to use, right, that reminded you that you worked in a cubicle because it was a database app at its sort of core. We wanted a product that people wanted to love, that people wanted to have a relationship with. And we were actually very fanatical about how we approached this idea at the point where it was almost sort of sciency sort of way. So what we said was like, okay, what's interesting about startups in terms of us wanting to create things that people love is that love and unconditional sort of feelings are things that are difficult for us to do in sort of real life. And at startups we have to do it sort of at scale. So we decided to do is start off by just looking at like, okay, how does real relationship work in the real world and how can we apply them to sort of how we run our business and sort of build our product that way? So we'll go over basically these two metaphors quiet new users as if we're trying to date them, and existing users as if it was a successful marriage. So when it comes to dating, a lot of the stuff that we uncovered had to do with first impressions. All of you often talk about your relationships in terms of the origin story. If I ask you, tell me about the first kiss, how you sort of met, how you propose. These are the things that we say over and over and over again. They're basically the word of mouth stories of our relationships and they're the same kinds of things that we do with companies. Human beings are relationship manufacturing creatures. We cannot help but create and anthropomorphize the things we interact with over and over again. So whether it's the cars we drive, the clothes we wear, the tools and softwares we use, we eventually prescribe characteristics to it a personality and we expect it to behave a certain way and that's how we sort of interact with it. Now, first impressions are important for the starting of any relationship because it's the one we tell over and over again, right? And there's something special about how we regard that origin story. I'll give you an example. If you're on a first date with somebody and you're having a nice dinner and you catch them picking their nose, you are probably not going to have another date with them, right? But if you're married to someone for about 20 to 30 years and you catch them on the barking larger digging for gold, you don't immediately call your lawyer and then say like we have a problem here, I need to start drawing up papers for divorce. You shrug your shoulders and say at least he has a heart of gold. So something about first time interactions means that the threshold is so much lower in terms of pass fail. So in software and for most products and internet software that we use, first impressions are pretty obvious and they're the things that you see a lot of companies sort of pay attention to in terms of what they send their marketing people to work on. My argument for people who are very good at product is they discover so many other first moments and they make those something memorable, right? The very first email you ever get from a piece of software, what happens when you first log in the links, the advertising, the very first time you interact with customer support, all of those are opportunities to seduce. So how did we think about sort of like making first moments on there? And we actually took this concept from the Japanese, they actually have two words for how to describe things when you're finished with them in terms of saying like, is this a quality item? And the two words of quality are atadame hinchitsu and midu kateki hinchitsu. And the first one means taken for granted quality, basically functionality. And the last one sort of means enchanting quality. Right? Take for example, a pen, right? Something has media kitechi. If the weight of the pen, the way the ink flows out of it, the way it's viewed by the people reading the handwriting from the pen is pleasurable both to the user of the pen and the people who's going to experience the byproducts of it, right? Taking it to the sort of next level, start with some examples. So this is Wufu's login link and it has a dinosaur on it, which I think is awesome, but if you hover over it, the spec has the added benefit of having a tooltip that doesn't explain you how to log in and what it does, but basically RA. And what we notice about this in early Usability studies as this put a smile on people's faces, like hands down, right? Universally. And I think a lot of times when we are assessing products we never think about like, hey, what is the motion on the person's face when they interact with this? This is Vimeo's login page. This is actually a couple iterations ago. It's one I find to be the most beautiful but it lets you know that when you're starting out on this journey with Vimeo that this is going to be something different. They do this all over the app. If you search for the word fart as you scroll up and down, it makes fart noises. As you do this, right, there's something different. Like this site interacts with you. It's a little bit magical, it's a little bit different and it's something that you want to talk about. You don't have to always do it with design. This is a sign up form for Cork, which used to be a social network for people who love to drink wine. On it it says email address. It's also your sign in and has to be legit. First name, what your mom calls you. Last name what your army buddies call you. Password something you remember but hard to guess. Password confirmation. Type it again. Think of it as a test. It's literally a poem as you fill out the form, right? And this is the kind of thing where you're like, oh, I like the people behind this. I'm going to enjoy this experience. Now what does it say when you fill out a form like this on Yahoo. About what the personality of this site is going to be? And what's disappointing to me is like, Yahoo forces every product and service under them to use this exact same login form. Flickr, I had thought, had one of the best sort of call to actions. It was get in there. Right? This is Heroku's sign up page. I think this is an older version, but what's remarkable about it is that what you start getting a feel for is like, oh, scaling up my sort of server and back end services is as easy as just sort of dragging up and down different sort of knobs and levers. It's going to be beautiful to use and looks fairly easy to scale. Since we're in a room full of computer science people, I think you'll appreciate this is Chocolat. This is a code editor and they only have one call to action when the time limit is up. They said everything in terms of all the features are exactly the same, except we change the font to Comic Sands. And what they're basically saying is like, hey, we know who our users are, who our real customers are, and they're going to be the people who care about this. This is Hurl. This is a website for checking HTP requests. And sometimes the places where you get errors are opportunities for first moments. If you hit a 404, this is what you get when we need help. Oftentimes what we do is we create really beautiful marketing materials, but when you actually need documentation, we sort of skimp out on sort of design features. And this is a point that you see happen over and over again. A company that gets this right is MailChimp. And what they did was they redesigned all of their help guides so that they look like magazine covers and overnight, basically, readership goes up on all these features and customer support for these things that sort of helps people optimize emails goes down. Speaking of documentation, Stripe, what's interesting about an API company is that there is no UX. The UX is actually just documentation, right? And there's opportunities even in documentation, sort of the enchantment amaze. So one of the things that I love about them is their examples are wonderful, but if you're actually sort of logged into the app, one of the things that is a super pain for most people, when you're dealing with most people's APIs, is like grabbing your API credentials and keys. And what Stripe does is it says, oh, if you're logged into the app, we automatically put your API credentials into the examples. So you only have to copy paste once when trying to learn their API. When Wufu wanted to launch the third version of our API, we realized, like, okay, that finally this is good enough that we want people to sort of build on top of it. We're trying to figure out how do we launch this out to the world that sort of has our personality behind it. Because a lot of people, they usually do things like a programming API contest, and they give out iPads and iPhones and it makes you look like everyone else. And so in our company, one weird value they have, it's a quirk of us is that the co founders are big medieval nuts and we would take everyone out to medieval times every single year on the anniversary of the founding of the company. And so we said we have to do something in that flavor. And so we contacted the guys@armor.com and we said, can you forge us a custom battle axe? And what we said was, if you win our programming contest, you would win one. And the result is people wanted to talk about this. It was something that people wanted to work on because they wanted to be able to say, like, I'm programming for a weapon. And what's cool is we had over 25 different applications created for us of quality and quantity that we could not have paid for on the budget. And the sort of time that we had for this. We got things like an iPhone app, an Android app, and WordPress plugins, right and all. Because what we did was we changed how people want to talk about the origin story of how they're interacting with one of our services. We can go like all day long going over these examples, but I'm going to shortcut this by saying you should just subscribe to little big details. It's just basically tons of screenshots of software that's just doing it right, that shows that they're being conscientious of the user and the customers when it comes to long term relationships or marriages. The only research that we ended up having to read is the stuff that was done by John Gottman. He's been featured in this American Life and Malcolm Gladwell's books. He's a marriage researcher up in Seattle, and he has an interesting parlor trick that he can do. He can watch a videotape of a couple fighting about some issue for 15 minutes and predict with an 85% accuracy rate, whether that couple will be together or not or divorced in four years. If he increases that video up to an hour and asks them to also talk about their hopes and dreams, that prediction rating goes up to 94%. They show these same videotapes to marriage counselors, successfully married couples, sociologists, psychiatrists, priests, et cetera. And they can't predict with random chance whether people are going to be together or not. So John Gottman understands something fundamental about how relationships work in the long term. And that basically how we fight, even in a short term period, can indicate sort of the whole system and what it's going to look like. And one of the surprising things he discovered is not that successfully married people don't fight at all. Turns out everybody fights, and we all fight about the exact same things money, kids, sex, time, and others. And others are things like jealousy and the in laws. To bring this around, you can actually attribute every single one of these to problems that you see in customer support when you're building out your product, right? So this costs too much. I'm having problems with the credit card. If you're building a service that helps people deal with their clients, they're very sensitive about anything happening with that performance, how long you're up and how fast others are. I said jealousy and in laws, right? So that's competition and partnership. So anything weird happening there, people are going to write to you about. And the reason I like to think about this in terms of customer support is that in everyone's sort of processing of like a conversion funnel, customer support is the thing that happens in between every one of these steps. It's the reason why people don't make it further down there. It's the thing that prevents conversion from happening. Now, as we were thinking through all these ideas and as we're building up the company, we realized that there's a big problem about how everyone sort of starts their company or build up their sort of engineering teams. And that is there's a broken feedback loop there. People are divorced from the consequences of their actions. And this is a result of actually the natural evolution of how most companies get founded, especially by technical co founders right before launch. It is a time of bliss, nirvana, and opportunity, right? Nothing that you do is wrong, right by your hand, which you feel is like God. Everything that you write, every line of code, feels perfect, right. And is a genius to you. The thing that happens is, after launch, reality sort of sets in, and then all these other tasks sort of come into place that we have to deal with. Now, what technical co founders want to do is get back to that initial state. And so what we often do, and what we often see, is that companies start siloing off all these other things. That actually is what makes a startup or a company sort of real and have other people do them. In our minds, these other tasks are inferior and we have other people in the company do them. And so for us, what we're trying to figure out is how do we change software development so that we inject some values that we don't talk about enough? Responsibility, accountability, humility, modesty. And we called this like a lot of other people. We had an acronym support driven Development. And basically it's very similar to TDD or other agile practice. It's a way of creating high quality software, but it's super simple. You don't need like a scrum, you don't need a bunch of postit notes. All you have to do is make everyone do customer support. And then what you end up having is you fix the feedback loop, right? The people who build the software are the ones supporting it, and you get all these sort of nice benefits as a result. So one of them is support responsible developers and designers and people build the stuff. They give the very best support. Now, we're not the first person to think of this. Paul English was a big purporter of this at Kayak, and what he did was install a Red customer support phone line in the middle of the engineering floor and it'll just ring with customer support calls. And people would ask him oftentimes, why would you pay engineers $120,000 or more to do something that you can pay other people a fraction of to handle in like a call center? And he says, well, after the second or third time that that phone rings and the engineer gets the same problem, they stop what they're doing, they fix the bug, and we stop getting phone calls about it. It's a way of having QA and a sort of nice, elegant solution. Now, John Gottman talks about the reason that we often break up with one another is due to four major causes, and they're warning signs. He causes them four horsemen, right? Criticism, contempt, defensiveness, and stonewalling. Now, criticism is basically people starting to focus not just on the specific issue at hand, but on the overarching issues. Like you never listen to users or you never think about us all the time, right? Contempt is when someone is purposely trying to insult somebody. Defensiveness is not trying to take accountability, trying to make excuses for their actions. And stonewalling is basically shutting down. Stonewalling, to John GoM, is one of the worst things that we can do in a relationship hold up. And oftentimes we don't worry much about this in customer support, criticism, and contempt. Right? Defensiveness, you see this all the times in companies, especially as they get older. But Stonewalling, this is something I see happen with startups all the time. You get a bunch of customers of support sort of coming in and you just think, I don't need to answer it, I don't need to respond, right? And that act of just not even getting back to them is one of the worst things you can do. And it's probably some of the biggest causes of churn in the early stages of startups. This is how support worked at Woofu. When we were acquired, we had about 500,000 users on the system. 5 million people used Wufu forms and reports whether they knew it or not. And all those people got support from the same ten people. And usually it was only one person. Dedicated support a day or any shift resulted in about 400 issues a week. It's about 800 emails. But a response time from 09:00 A.m. To 09:00 P.m. Was between seven to twelve minutes, right? And from 09:00 P.m. To midnight, it was an hour. And then on the weekend, it would be no longer than 24 hours. And we carried this up all the way up to this scale. What a lot of people forget about and often talk about with Airbnb is how, like, oh, they did this interesting thing where they went up to New York and offered, like, professional photographers, and the founders would go out there and actually take pictures of the people's apartments to help them sell more. Focusing on the stories around conversion, what most people don't realize is a lot of times when I saw Joe in the early days of Airbnb, he had a phone sort of headset stuck to his head all the time because he was doing phone support. Nonstop. Turn is a story that we don't like to talk about all the time. Airbnb's sort of growth really started picking up once they figured out how to match capacity to the demand or the phone calls, they were getting into their support system. At Wufu, we actually constantly did experiments around support because we were so obsessed with it. One experiment we did was we heard Kathy Sierra do a talk about there's a disconnect between the motions that we have when we need help, and sort of the content and the reactions we get from people when we get help from them, especially online, because they just don't see all those nonverbal cues. So she said, unless there's face recognition on the web, we're just always going to be disconnected from our users. Our feeling was like, well, we're not face recognition experts, but I think there's another way of getting empathy. So as form builders, we added a drop down, and what we said was like, hey, what's your emotional state? And our hypothesis was that no one was going to fill this out. We basically thought, oh, okay, you know what? This is going to be pretty a lame experiment, but we'll see how it sort of goes. And it turned out the emotional state drop down field was filled out 75.8% of the time. The browser type drop down field just in comparison was filled out 78.1% of the time. Right. So people were basically telling us, for my technical support issue, how I feel about this problem is just as important as all the technical details you need to sort of figure out how to debug it. Now, we didn't prioritize things or triage things by emotion, right? And for the most part people then game the system. One of the interesting byproducts of it was that we noticed that people started being nicer to us in the customer support. It was something sort of subconscious. We just were thinking like wow, our users are so much better now. What's going on? And we went back and looked at the data and we did some text analysis and we realized is that oh, when it comes to only communicating with people over written words like email, there's only three ways that you show strong emotions, right? Exclamation marks, curse words and all caps. And sure enough, on all three of those metrics, they've gone down in sort of the way people were talking to us. And the customer support, once people had a simple outlet for their emotions, right, people would be a lot more rational and it made our jobs a lot more pleasant as a result. The other byproduct that is awesome is that you actually build better software when you do this. Far better software. This is actually backed up by tons of research. Jared Spool at User Interface Engineering, which is sort of the big players in this space, says there's a direct correlation to how much time we spend directly exposed to users and how good our designs sort of get. He says it has to come in a specific way. It has to be direct exposure, right? It can't be something where someone generates a report or through a graph. You have to be interacting with them somewhat real time. It has to be a minimum of every six weeks and has to be for at least 2 hours, otherwise your software will get worse over time. Our developers, our people who are on Wufu were getting exposed to our users four to 8 hours every single week. And what it does is it changes the way you sort of build software shared. Spool has another way of talking about how we build products, right? Let's imagine that this represents all the knowledge needed to sort of use your app on a spectrum, right? This is like no, right? And this is all the knowledge needed, right? And these two lines are pretty much your interaction with users, what you're trying to get them to. This is currently where their knowledge point is. And this is the target knowledge point that you're trying to get them to to understand and use your app. The gap between those is called a knowledge gap. Jared, it's both calls and what's interesting about this is there's only two ways to sort of fix this. That gap represents how intuitive your app is. You either get the user to increase their knowledge or you decrease the amount of knowledge that's needed to use your application. And oftentimes as engineers and people who build and work on products, we think let's add new features. And new features only means let's increase the knowledge gap. So for us, we actually focus a lot on the other sort of direction. And so what that meant is we spent a lot of time, 30% of our engineering time was spent on internal tools to help with our customer support stuff. But oftentimes it was spent helping people help themselves. Things like Frequently Asked questions, tool tips, things like if you just click the Help link, right, instead of taking you to the generic Help sort of documentation page, you go to the specific page where you're looking at. That's going to be most sort of appropriate for what you're working on. We redesigned our documentation over and over again. A B tested it constantly. One iteration of our documentation reduced customer support by 30% overnight. It's one of those things where overnight all the people that work on the product immediately had 30% less work to do. Now, what happens if you have everyone work on customer support constantly and thinking about it in terms of a remarkable way? Well, I talked a lot about in the very beginning, growth is a function of conversion and churn. This is Wufu's growth curve for the first five years, right? What's interesting is we paid no money on advertising, on marketing. All of it was done by word of mouth growth, right? And the interaction between new users and downgrades are this it's so slight what it takes, that gap making that sort of work. And what a lot of people keep forgetting is that there's almost no difference between an increase in conversion rate 1% increase and a 1% decrease in churn. They do exactly the same thing to your growth. However, the latter is actually much easier to do. It's much cheaper to do in your apps. And a lot of times we neglect this to way far along, right? And we usually have our B team works on these sort of products and services. This is actually not the graph that we track most of the time at WUF. It's not even the one I'm proud of. This is the one I'm proud of because even though we had this sort of nice awesome curve of growth, this is what allowed us to scale, keep the company small, have an awesome culture. And that required doing a lot of these things to help people sort of do what they need. So John gottman noticed there was a different type of behavior for relationships and. Why people divorced. Basically, there would be some subset of people who would stay together 1015 years, and then all of a sudden they divorce. And there was none of the other indicators would sort of show that this is what was going to happen. And it was looking through the data and he realized, oh, there's no passion, there's no fire between these people, right? When it comes to relationships, they kind of follow the second law of thermodynamics right. In a closed energy system, things tend to run down, so you have to constantly be putting energy and effort back into it. Now, the way a lot of people sort of think about showing people that I care about you in products and in companies is to do things like, let's have a blog, right? Let's have a newsletter. The thing is, we'd look at these rates, and basically it was such a small percentage of our active users that it was like most of our users have no idea all the awesome stuff that we're doing for them. So we built a new tool. We called it the Woofo Alert System. And what allowed us to do is just timestamp every new feature that we were building for users, and then every time they would log in, we would look at the difference between their login time or last login time and the new features that were implemented. And we had this message show up, hey, since you've been gone, here's all the awesome stuff that we did for you. Hands down, this was the most talked about feature I've ever had. Every time I went out to talk to users, right, they'd say, like, dude, I love that since you've been gone thing. Even though I pay the same amount every single month, you guys are doing something for me almost every week. And it's totally awesome. It makes me feel like I'm getting maximum value. The other thing that we did, in addition to having everyone support the people that paid their paycheck, is have them say thank you. And this was a large part due to us injecting sort of humility and modesty into sort of the equation. Every single Friday, we would get together and we'd just write simple handwritten thank you cards to our users. And I know there's tons of people who would not be sort of excited about doing this, but it was a ritual that made sort of all the difference in terms of having a team that was very tightly neat, tightly knit also, and working on stuff that they really cared about. They always constantly knew what the mission was for and why we sort of did what we did. These aren't fancy thank you cards, right? They're just simple, like, handwritten stuff on an index card. We threw in a sticker and slapped on a dinosaur on the front of it. And what's interesting is we started this practice as a result of the early days of starting Wufu. Chris Ryan and I were talking, and we're trying to figure out what are we going to do to sort of show users that we appreciate them around Christmas. And Chris came up with this idea where he said, hey guys. So a couple of years ago, my mom made me write thank you notes to all my relatives for my Christmas gifts. And I didn't really like to do it, but the following year, all my presents were super good. So I think we should try this for our business and see how it goes. So that first year, we wrote handwritten Christmas cards to all of our users. That first year. Second year rolls around, and we have too many customers, and it's still just the three founders. And we were going like, we're kind of screwed. I don't know what we're going to do. And we read a book called The Ultimate Question, and in it he talks about, hey, just focus on your most profitable users. If you just send them and take care of them, things will work out. So we're like, all right, that makes sense. That's scalable. So that year we only write to our highest paying customers, and the January rolls around that second year, and one of our longtime loyal users writes us, and he's basically like, hey guys, I really love that Christmas card you sent me the first year. And I just wanted you to know I haven't received my second card yet, and I'm just looking forward to I know you didn't forget about me. Thanks a lot. So we're like, fuck because best way to sort of exceed expectations and not send any to begin with. So we were like, sort of in this conundrum. And what we decided after thinking about it for a while, is that we need to stop doing it just one time a year. It needs to be something that's part of the culture happens every sort of week even. And even though we'll never catch up to all of our customers, just the practice of doing it will make all the difference. I talked a lot about a bunch of lovey dovey stuff and sort of like touchy feely things that I think a lot of engineers don't like to think about too often. And so I'll end on some sort of hard business data or research. There's an article that was put out by the Harvard Business Review several years ago by Michael Tracy and Fred Wizermen. And in it, they talk about the discipline of market leaders. They say there's only three ways that you achieve market dominance. And depending on how you want to achieve that market dominance, you have to organize your company in a very specific way. Best price, best product, the best overall solution. If you want to be the best price out there, you focus on logistics. A walmart and Amazon. If you want to be the best product out there, you focus on R D. Apple's usually a quintessential example of that best overall solution. It's about being customer intimate. And this is the path that you see followed by luxury brands and hospitality industry. What I love about this path towards market dominance is that the third one is the only one that everyone can do at any stage of their company. Requires almost no money to get started with. Usually just requires a little bit of humility and some manners. And as a result, you can achieve the success as any other people in sort of your market. That's all I got. Thank you very much. Yeah. Let's take some questions if you guys have any right in the back there.
[ 0:33:05.000 ---> 0:33:17.000 ] Speaker B : Building products that users love, you might have multiple different types of users. How do you build one product that all users love? Maybe there's a feature that one really likes but detracts value from one entry.
[ 0:33:17.000 ---> 0:34:22.000 ] Speaker A : All right, so what do you do when you have a product with lots of different type of users, right? Some users will love one thing and another will another. And I agree there's an interesting fine line for that. What I always usually tell people is focus on the people who are the most passionate, especially in the early stages, right. Whatever niche it's going to be, that's who I'd focus on completely. Things that a lot of different products did. I think Ben Sullivan of Pinterest started off with design bloggers, right? Curtail your thing for them and eventually you'll figure out sort of universal values that will appeal to a lot of other people. So just start one at a time. And a lot of the examples that you see up there, a lot of people make the mistake is like, oh, I'll just make my app funny. But humor is really difficult to do, right? What you want to shoot for is something sort of witty and quite honestly, you have to get functionality, right? So like the Japanese quality, if you don't have a tateme on there, don't try to do anything witty, right? Because it will backfire on you. So, hands down, our number one focus is make it as easy to use as possible for Wufu and anything else on top was polish right here.
[ 0:34:25.000 ---> 0:34:58.000 ] Speaker B : So everybody says that focus on your product, which I'm also a dev guy, I love to build product and I love to make it the best. But we are at certain point that we are focused on our product, but we don't get customary, right? Second thing, so how much we should focus on product, but because we should do now marketing, we should get some other customers and start talking to customers. But when you are too focused on your product so what exactly do you guys mean when you are saying like, focus fully on your product and give the best product?
[ 0:34:59.000 ---> 0:36:27.000 ] Speaker A : Okay, so the question sort of is how do we balance this sort of thing where we want to be obsessed with working on product but all the other skills and sort of tasks that are needed by a company like marketing and branding and all that stuff and how do we sort of balance that? And the thing is with startups you're juggling tons of things constantly in the air. The thing is, if you're working on product you should also always have this flip side is when you're talking to users, right? And for us inside of Wufu, the way we got people to talk to users is they just did customer support and they got to see firsthand right away whether their feature sucked or not and also impacted everyone else in the company because everyone had a customer support shift. So you had this sort of social incentive to sort of make everything work. And so like I said, there should be no point where you only focus on product. You should always have time where you work on product and then you see sort of what users say to you and you should always have this virtual feedback loop on there. So be careful when you don't have that usually what ends up happening if you're lucky. In terms of marketing and sales, usually my feeling is like you having to spend money on marketing and advertising, all that stuff. It's usually a tax you pay because you haven't made your product remarkable, right? Word of mouth growth is the easiest kind of growth and it's how a lot of the great companies sort of grow. So figure out how to wait, how to have a story that people want to tell about your product where they're the most interesting person at the dinner table, right? And then that person is your salesperson, right? That person is your sales force for you right here.
[ 0:36:30.000 ---> 0:36:47.000 ] Speaker C : Customer or user need and the demand is there and it's the right solution. How do you communicate with engineering and design to make sure the execution? Sometimes people in the team have ideas but at the end of day you have to make a decision of where to go.
[ 0:36:48.000 ---> 0:37:56.000 ] Speaker A : So how do you make a decision on product and communicate that with your sort of engineering team when there's lots of different directions to go? My feeling is that for us, we just looked at support and it was really easy because you often just saw what are the things that people are having the most amount of problems with or people asking you all the time. You cannot help but get feature requests from people. No matter whatever opening or orifice you have in your product or app, people will jam feature requests in there. So you're easily going to know sort of what they sort of want. Your job as a product person, an engineer, is to not just do what they say because that way you'll just be a slave is to figure out sort of deeply what are the reasons why underlying those things and sort of solve that deep underlying reason. The thing is, if everyone wants to have a different way to sort of go, then ultimately it comes down to like someone's going to figure something out, but also make the smallest version of each little idea no longer than a week or two weeks to build it out there. And then you can try them out and see sort of what works or don't work. I think it's dangerous to have multiple different product directions that requires lots of time to sort of figure out. Sam, relate to that.
[ 0:37:56.000 ---> 0:38:00.000 ] Speaker B : Could you tell the story of how the King for a Day thing that it would go?
[ 0:38:00.000 ---> 0:39:21.000 ] Speaker A : Yeah. Okay. I don't like hackathons. I think they sort of suck in terms of ones done inside of companies because you spend, like, 48 hours working on something really hard that you're sort of passionate about, and 99% of them never make it to production. Right? And it's sort of really super sad. So for us, we flipped the knot on its head and we came with an idea that we called King for a Day, and it actually worked over the weekend. But how it worked is someone randomly in the company got drawn, and they got to be the king, and the king got to tell everyone else what to do on the product. So everything that was bothering them about Woofu, about the customer support stuff or some feature they really want to have built, they got the engineering resources, the marketing research, advertising resources of everyone inside of the company to make it sort of happen. And of course, we'd work with them to figure out what can be actually done in 48 hours. But we would do this one to two times a year, and it was like a huge hit, and it was a boost to morale because what people most love is working on things where it's like, oh, I made a difference to the app. Right? And so for us, that's one way that we would sort of divide time for product direction. It's like sometimes the people that work for you, they have a strong opinion about where it should go, and it's a good way to sort of democratize it a little bit by rotating it around. Yes.
[ 0:39:21.000 ---> 0:39:27.000 ] Speaker B : You said you guys all work from home. It usually seems like a nightmare. Didn't have an office. How did you make that work?
[ 0:39:27.000 ---> 0:42:18.000 ] Speaker A : Okay, so we all work from home. So I will tell you this. We all still work within the Tampa Bay area. We would allow anybody work from anywhere, but usually as we tried to recruit them, they'd sort of meet our team and they just decide, okay, we just want to come and move here anyway. Remote working is especially tricky. A lot of people like to romanticize it, especially people who are like employees. But the thing is, an office gives you a lot of sort of benefits and efficiencies that you now have to compensate for when you have remote working. But remote working also have these other sort of efficiencies in place. For example, I don't have to worry about my employees losing 2 hours of their day to commuting, for instance. So the biggest thing that we had to do for remote working is to respect people's time. And so the way we had it set up is we actually had a four and a half day work week at Wufu. Half day on Friday was for all the meetings and stuff. We said like no bizdev meetings, no talking with other outside parties. They often be done on Friday. On that half day they couldn't be done in the middle of the week. And then also one day of everyone was already dedicated to customer support. So everyone in our company effectively only had three days each week to actually build or work on whatever they were doing. But I actually firmly believe that if you have three solid days, right, eight to 10 hours where you're only working on what you need to build, you can get a ton of shit done. And so what we said was you have to respect everyone's time during that three day period, if they're in that three day period. And what we came up with is a 15 minutes rule. And the way it worked is you could have a discussion like a chat or a phone call or whatever with someone, but it could go no longer than 15 minutes. So if you have some complicated issue that you couldn't figure out, we'd say at 15 minutes you are to immediately table that item and have us discuss it on Friday and you'd move on to the next item on your list. Right? The enhanced productivity. More often than not, I would say 90% of the time the item never got brought up on Friday because usually what would happen is people would sleep on it and then they would magically say like hey, I found a solution. Or like hey, that's not a big problem whatsoever because most problems inside of company, they don't need to be solved in real time or right away. The only things are when the site is down or payments aren't working right, everything outside of that is basically kind of luxury. So focus on your priorities as much as possible and as a result our ten person team did far more than many, many other companies as a result. But it takes extra work to make remote working happen. We are an extremely disciplined sort of team and I would have to say there's almost not many YC companies that actually have been able to replicate sort of what we do. I think there's only two other companies I think in YC that sort of have the same sort of disciplined working style. It takes more work in a very different fashion, right? An office allows you to be a little bit lazier in terms of all these things around productivity. Okay.
[ 0:42:20.000 ---> 0:42:35.000 ] Speaker B : Over here, just to build up that question. As the leader of the team, how did you manage to instill a company culture and also have accountability for your employees, especially because the same working space.
[ 0:42:35.000 ---> 0:44:20.000 ] Speaker A : Okay, how do we set up accountability for employees as a manager? All right, so at Wufu, we were profitable nine months after launch, so we had profit sharing, right? So it makes sense, pretty simple and clear. It would be a multiple of whatever bonus pool that we sort of had. And the performance measures would be based on sort of how they did in customer support on their duties there and sort of what they said they were wanting to accomplish or do. I don't like process, and I don't like lots of tools to help get people to be productive. So the only thing that we had for helping people manage sort of their projects is to do lists. And that is like simple text files that we shared in a Dropbox account. Each person had their name on it. And you got to see every time someone updated their to do list is every single night you just said everything that you did that day, right? And then on Friday, we would just go over, okay, this is what you said last week that you're going to do. This is what you actually got done. What are sort of the problems at hand? And it's super simple, right? It creates this nice written trail for how to sort of handle stuff. And I don't have to worry about managing them. They sort of set the tone for how they want to be sort of assessed, and it makes it really simple. And for people who are excellent at what they do, it works very, very well. And then when you actually have problems, it's very easy to fire people. I was fortunate that I never had to fire anyone at Wufu, right? But we were able to correct a lot of people's behavior very, very quickly because we just kind of look at this and it's like, look, this is your pattern of behavior. You finish a fraction of the items on your list. You do most of the items at the last second, right, before Friday. That's a problem. You've got to manage your time better. And this is evidence that you've provided to us. All we have to do is sort of describe it back to you. And because everyone in the company sort of sees it, there's social pressure that's put into place that helps make it all sort of happen right here.
[ 0:44:20.000 ---> 0:44:27.000 ] Speaker C : How did you hire people that you felt would be able to work remotely and in this kind of environment, that's not standard.
[ 0:44:27.000 ---> 0:45:38.000 ] Speaker A : So how do you hire people that can work remotely and then sort of work in this sort of fashion? So pretty easily you have them work on a side project for you. So you contract them out and they have to work remotely as such. Usually the projects I like to have them work on is about a month long, right? I could do things much faster for a week, but usually get a good sense of how well people sort of manage themselves and work on things from a project like that. So that was always the first assessment. We never did anything just by interviews. The other thing we had to sort of screen them for is their ability to do customer supports because not every engineer sort of has the empathy skills to handle that stress. So sometimes I would have people write breakup letters to me, right, in an interview and just like, hey, pretend like you have to break up with me. You have 15 minutes to write it down there. And you can only write by hand, what are you going to say? And so you get a good sense of sort of their writing skills because like 90% of you do in customer support is tell them bad news. Like, we don't support that feature. Sorry, that's not going to work or it's not going to be available. And so people have to have sort of tact at that. How about one more question? One question right here the glasses.
[ 0:45:38.000 ---> 0:45:44.000 ] Speaker B : So it seems like you have all these tricks and experiments that have really helped the company. Give me stories. What if it didn't work out?
[ 0:45:44.000 ---> 0:47:58.000 ] Speaker A : Have all these tricks and experiments to help the company. Are there any ones that didn't work out? All right, I'll talk about one. So one of the things that we did early on to try to motivate ourselves was try to get we understood this idea of crunch mode and that it's really bad for people. Like if you're doing a subscription business, you need people to last for the long term. And video games, a lot of times they crunch people all the time for a specific deadline or have multiple sprints every two weeks and you have to shoot up to this deadline. And it's like exhausting because what ends up happening is you might get an increase in productivity, but the recovery period that you need for people is always greater than the productivity you gain. And in a company where you need everyone doing customer support and being on their game and constantly pushing out features, you don't have time for recovery. So we were thinking about, okay, we want to build like a company vacation into how Wufu sort of works to reward our users every single year. And we said, okay, if the vacation is sort of built in there for the recovery, we can have one crunch period before that vacation set up. And we'll just only do customer support that will sort of scale with people. So the way we did the very first crunch mode is that it was just between the three founders. And we had each of us draw up a ten item to do list that would be fairly aggressive. And the first person to get through seven of their items would win. And the last person to get through seven of their items would become what we called trip bitch. And trip bitch meant that you carried the other person's luggage and got people drinks when you're on the company vacation. So we did that, and during that period, everyone was pretty excited about it and motivated, and the winner got to choose the next company vacation the following year. And then all of a sudden, ryan had basically poorly estimated the items on his list, and he realized very quickly, I'm going to fucking lose. And so he was just like, I give up. And he just sort of stopped. So crunch mode turned out to be blah mode for him because he knew he was going to lose. It became pretty demoralized. So as a result of doing that, we decided not to do it in that similar fashion anymore. Good idea. That we like to talk about, but is one that we never did again. So all right, guys, thanks a lot. You can email me at kevin@ycombinator.com.
