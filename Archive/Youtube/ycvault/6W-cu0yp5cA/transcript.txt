[ 0:00:15.000 ---> 0:00:42.000 ] Speaker A : Everyone. Thanks for joining. I'm Paige from Y Combinator on our work at a startup team. That's the site that our portfolio companies use to hire people and the site that candidates can go to to get jobs at YC startups. With us today, we have three three guests who are all early in founding engineers at YC companies. I'm going to let them introduce themselves, and then they'll kind of share a bit about their backgrounds, their companies, and then we'll dive into Q A after that.
[ 0:00:43.000 ---> 0:00:43.000 ] Speaker B : Awesome.
[ 0:00:44.000 ---> 0:01:15.000 ] Speaker C : Thanks, Paige. Yeah. My name is Gar. I work at Cambly, and we're an English tutoring company. We connect English tutors with students around the world or video chat to learn English. I joined Cambly in 2014, so I've been there for eight years. I was the first full time engineering hire, and now we have an engineering team of 25 engineers, and I lead that team. And before this, I was at Google, which is where I met one of the founders of Cambly, which is how I came to join Cambly.
[ 0:01:16.000 ---> 0:02:17.000 ] Speaker B : Hi, I'm Jen. I'm a software engineer at Finley. So, like I said, working here since October last year, finley is creating debt capital management software. And so we're just trying to streamline the process for a lot of these kind of very manual financial processes for our customers. So before working at Finley for joining last October, I used to be more of a kind of consulting software engineer and so worked on projects here and there. And in my past life, I like to say I was a molecular biology researcher, so I was a later in life career researcher, but loving it so far. And I've always kind of coded in my free time and so living the dream, getting paid for a hobby.
[ 0:02:17.000 ---> 0:02:18.000 ] Speaker C : Hey.
[ 0:02:18.000 ---> 0:03:17.000 ] Speaker D : So I'm Jordan. I'm an engineer at Explo. I've been in Expo since April of 2021, so about a year and a half now. At Expo, we let you make customer facing dashboards that you can embed regardless of your database, just kind of like fully customizable dashboards that can fit in your website. Before I was at Xflow, I was at this other company, applied Protective Technologies. I was on the architecture team for that company, and I was getting to maintain and build features on all these cool core components that our platform was running on. But I wasn't getting to build any of those, and I was working with the people who had built the foundation, but I really wanted to be that person who had built the foundation. So I found out about Xplo. Sounded like a great opportunity to start learning how to do that, learning how to build an email system, a job queue, like deployment infrastructure, all that stuff. And it's been a pretty cool journey since then.
[ 0:03:18.000 ---> 0:03:19.000 ] Speaker B : Great, thank you.
[ 0:03:19.000 ---> 0:03:32.000 ] Speaker A : So maybe we will start with what I assume everyone on the call wants to know. What is a founding engineer and what does that kind of mean to you when you hear someone say that or talk about that or if you see that in a job description?
[ 0:03:32.000 ---> 0:04:19.000 ] Speaker B : Yes. I don't know about the rest of you all, but this is at least tech side. This is the first startup that I'm working for as a software engineer. So before joining this call, and I mean, when I was job searching, I kind of Googled, what does that even mean? What is a sounding engineer? And Google likes to say that it is kind of early engineers who not only contribute technically, but also kind of set the tone of what kind of the engineering culture is like at A. So I don't know. For Gar and Jordan, who probably have more experience than me, do you find that to be true or what has your experience been?
[ 0:04:19.000 ---> 0:04:54.000 ] Speaker D : No, I think that's totally like, when I was looking for jobs, I never thought I would work at a startup. Just I didn't think I necessarily had the skills toolkit to kind of have that responsibility, especially as a founding engineer. But I realized really quickly that a lot of it does come down to that. You are helping define not just your engineering, but a lot of your culture. And I think that is somewhere that I do bring a lot and I do excel, so I totally agree. I think that when you're a founding engineer, you definitely have both of those responsibilities to bear.
[ 0:04:54.000 ---> 0:05:19.000 ] Speaker C : My experience was a little different because the two founders are also engineers, so I was the first one to join, but I quickly found that as founders, they're distracted by all these other things and trying to fill all the other roles. And so I quickly was in that same spot where it's defining, like, what does the technical vision look like? How are we going to expand the engineering team and kind of lay the framework for growing that engineering team?
[ 0:05:19.000 ---> 0:05:26.000 ] Speaker A : When you first joined and in the early days, how did your day to day role end up differing from either what you were told or what you expected?
[ 0:05:26.000 ---> 0:05:52.000 ] Speaker C : I think I thought it was going to be just engineering, and then you end up bleeding into all these other roles. I remember we're answering customer support tickets and then, okay, what product features do we need to do? So you end up doing a bunch of this PM work that I had no experience doing before, but got up to speed on that pretty quickly. So definitely I'd say a lot of broadness to the role and executing a lot of different roles.
[ 0:05:52.000 ---> 0:06:17.000 ] Speaker D : Yeah, I think that's one of the things that really excited me. I kind of figured that I was going to be doing a lot of PM work, customer support work, and that was going to be an interesting change of pace. So definitely a big jump into the deep end just going from you're an engineer, you're doing your tasks and maybe part of other meetings to you're. In meetings all day, you're jumping between 50 different things, but it's a cool jump to take.
[ 0:06:17.000 ---> 0:06:46.000 ] Speaker E : I have a question for the panel. So I know titles. Often in the startup world, people sort of think titles title schmidtle what does it mean? But the reason they matter, in my experience, is when you're interacting with people outside the company, they want to have some idea of what your role is. So my question is, how does Founding engineer relate to, say, CTO or Senior VP or some of the titles you see at more established companies? Is there some sort of mapping?
[ 0:06:46.000 ---> 0:07:13.000 ] Speaker C : Yeah, we didn't do titles. We still haven't really done titles at my company. We're like, in the process of just doing that. I think if the founders weren't engineers, it would have been important to just give some random CTO or VP title for exactly the reason you said, but maybe caveat that with it means nothing that early on internally, that's probably subject to change.
[ 0:07:14.000 ---> 0:07:18.000 ] Speaker D : Yeah, I think at a startup or sorry, Jen, you should go.
[ 0:07:18.000 ---> 0:08:42.000 ] Speaker B : Oh, yeah, no worries. I think it really depends on your company. One, the culture, and two, also the size. Like, for example, at Finley right now, we don't nearly have enough engineers to really justify having levels. A lot of engineers are working together for lots of different projects. We have different engineering leads that basically end up working with our business side to have project managers. So a lot of the roles that you would see broken out at larger companies into specific roles end up being handled by one person, especially because of the startup size. So having engineering levels, kind of like Gar said, we know just based on years of experience and kind of the background and context that other engineers have, even though we all have the same title, I can rely on the more senior engineers to actually answer a lot of these technical questions. But the nature of our work is that everyone is responsible for their kind of technical area, and that part isn't even playing field. So having Senior Engineer titles and stuff like that at our stage doesn't really make sense at our company. We do have a CTO, so I don't know about your company scar and journey, but we have a CTO and then everybody else is just titled Software Engineer.
[ 0:08:42.000 ---> 0:08:44.000 ] Speaker D : Yeah, it's the same for us.
[ 0:08:44.000 ---> 0:08:57.000 ] Speaker C : It was basically the same for us, except they recently as I took over the engineering team, they just gave me the title of Director of Engineering for exactly the reason you brought up Daniel. That's helpful for external communications and maybe.
[ 0:08:57.000 ---> 0:09:10.000 ] Speaker A : Going off of that as the company grew, how did your role change and how did you kind of shift out of the founding engineer role? Or was it something that kind of stuck with you because of how early you joined?
[ 0:09:10.000 ---> 0:09:37.000 ] Speaker C : Yeah, I mean, the role definitely changes as the team grew. Inevitably, you have all this institutional knowledge, and so people start looking to you. It's pretty typical that you're probably going to be leading the engineering. I think there's a good chance of that. And so then it just moves into managing, growing the team, onboarding new people, defining the processes and culture as kind of Jen and Jordan pointed out.
[ 0:09:37.000 ---> 0:10:01.000 ] Speaker D : Yeah, I think in the past couple of months as we've onboarded, new people definitely kind of like the realization that I have a lot of institutional knowledge and context for a lot of our stack and a lot of our code base has become more clear. And that's an exciting evolution of my role. Don't exactly know where that's going to lead yet, but it was a cool realization to hit.
[ 0:10:02.000 ---> 0:10:59.000 ] Speaker B : I'm at the same spot as Jordan as well, even though I only joined nine months ago. We have a smaller engineering team, so the reality is when we onboarded like, three new engineers a few weeks ago, it's like, oh, well, who's going to help onboard? Well, everyone. And so it's like what? We've kind of gotten to this thing where different people lead kind of different technical areas of our stack. And so just as our engineering team grows, like Gar said, you have institutional knowledge. For me. I didn't really have any background in finance at all. So even knowing the lingo kind of knowing what our product is, what the actual problem with our product is, so just being comfortable in that area kind of helps you kind of lead and helps you just onboard and get all the other engineers really comfortable with working on your team and things like that.
[ 0:11:03.000 ---> 0:11:07.000 ] Speaker A : How many people on your team day to day do you work with?
[ 0:11:07.000 ---> 0:11:37.000 ] Speaker D : We're 14 people so far, and I think I've worked especially when it comes to the engineering side of our company. I work pretty closely with everyone on the day to day just because I do a lot of our deployment coordination. So I end up interfacing with people. And then on the sales side, I think I also end up at least speaking to someone kind of in our BD on a day to day basis. So, yeah, I'd say I'm interacting with like, half the company on any given day.
[ 0:11:38.000 ---> 0:12:24.000 ] Speaker C : Yeah, our company is like 140 people or so now spread out around the globe. And so we used to interact really closely with all of our country managers because they'd be feeding us all this feedback. But a couple of years ago for my role, there was kind of an inflection point where when I was working with all the engineers on the team, when we had about 15, my day to day was very focused on working with them. And then once we promoted two more engineering managers and there was like a layer between me and the rest of the team, my role switched to a lot of working with recruiting, working with product, and working with the other leads. So there's almost like an inflection point once you reach that scale where instead of working closely with people below you, you start to work more cross functionally.
[ 0:12:25.000 ---> 0:13:22.000 ] Speaker B : Yeah. At Finley, I think we're at about the same size as Expo, right around like 13 or 14 employees. What's great here is that I would say I get to talk to probably at least 75% of the people on our team on a day to day basis. We work really cross functionally because we rely heavily on our capital market side to make sure that kind of what we're building makes sense for our customers. And so I think that's another really cool thing about being a founding engineer is that instead of if this is something that you're interested in, if you don't just want to focus on the technical things, you interface a lot with all parts of the business and you get to see everything and a lot of the working pieces.
[ 0:13:22.000 ---> 0:13:37.000 ] Speaker A : So going off of that, how do you think when candidates are thinking about joining a startup, how should they think about becoming a founding engineer and thinking about their skill set when applying to roles?
[ 0:13:38.000 ---> 0:15:01.000 ] Speaker B : I think when I was applying to startup roles, I was really focused on the growth aspect of it. I think especially at a smaller company, you have the opportunity to kind of put your hand in many pots or wear many hats or whatever kind of thing you want to call it. And I think that I went into it thinking that I would be heavily focused technically and grow heavily technically, which, yes, that's true, but kind of, as the other engineers have mentioned, a lot of what I do is kind of more soft, skill based. So things like leading a project, making sure we deliver on time and things like that. And there's a lot of things that happen when you're a founding engineer, kind of the roles and responsibilities are different than just being entirely engineering, even though that's your main role. And so I think that is a large part to consider if you want to join a company earlier is that you'll be relied on for lots of things that are not engineering as well. Well, it depends on your company and how they want to work. But kind of at our company, everyone helps wherever they can. And so I think for me that's a really exciting part of being an early engineer.
[ 0:15:02.000 ---> 0:15:32.000 ] Speaker C : I think coming back to the earlier thing, for me it was these skills that I didn't expect to have to learn when I joined. I thought I would do mostly engineering, but suddenly I was responsible for a lot of business metrics and tying what we're going to work on and what's important to work on to actual metrics, which was awesome. It was just something I never thought about before. So having to dig into that stuff was really an awesome skill that I don't think I would have gotten outside of working at a startup.
[ 0:15:33.000 ---> 0:16:04.000 ] Speaker D : Yeah, Gar and Jen have said a lot of what I was going to say, so I don't have that much to add. But it's definitely I mean, I don't have personal experience to know if this is impossible or ill advised, but it definitely seems like when you're joining a startup at such an early stage, like coming in with the idea of I want to do this one thing or I just want to engineer, it's kind of a tough mentality. There are definitely startups out there that I'm sure work for that, but it's definitely a harder mentality to keep once you just realize the scope of what you have to do.
[ 0:16:05.000 ---> 0:17:07.000 ] Speaker B : I think also being really early on, I think sometimes as engineers, we feel like our role is defined by our quality of code and all the features that we push out and things like that. But early on, I'm experiencing this now. You learn that at a startup, the feature that you treasured and it was your baby for a couple of months, it's going to get trashed or repurposed in some way that was different than what you thought because at such an early stage, we always want to make sure that we're building the right thing for our customers. And it's not about like, this was super cool. Technically, we want to keep it. It's like a sunken Cost fallacy. So you just need to kind of roll with the punches and kind of be fluid to wherever this raging river takes you kind of kind of mentality, in my opinion. Yeah.
[ 0:17:07.000 ---> 0:17:27.000 ] Speaker D : And at some point, it's like when you build that super cool feature and you learned whatever you needed to learn for that feature, and then it gets trashed like, three months later, you celebrate the win. That look at what we built. Look at what we got to learn, and then look at what that made us learn about all this new work we get to do. At some point, you kind of have to turn that and turn it into a win.
[ 0:17:28.000 ---> 0:18:07.000 ] Speaker C : Yeah. I don't know if you guys experienced this, but the style of writing code changed dramatically for me, where I was used to working in a large code base with a bunch of people, where you had to write high quality code that could be modified by other people. But early on, it was more important to just get that out and test it and you didn't actually have to worry about a bunch of other people touching and maintaining that code because as you said, it would get trashed, so it was more important to get it out quickly. I know that will be a contentious statement for some and now we've trended the other way, but early on, I think that was a tough skill for me to learn, but really valuable.
[ 0:18:08.000 ---> 0:18:30.000 ] Speaker D : Yeah, I definitely came in. My team lead at my old company had a whole style guide and all these core libraries we had written. And I came in. I was like, I'm going to write all of these. Everyone's going to be able to use my code when we have 40 engineers next year. And I very quickly realized that that was not the best use of my time. But that's okay.
[ 0:18:31.000 ---> 0:20:21.000 ] Speaker B : Yeah, I really appreciate the approach that we've like, I think it's exactly what Gar said originally. It's like, yeah, just ship stuff. We have code reviews and things to make sure nothing too janky goes out there. But what's really great is that over time, as you add more engineers, it necessitates more of a convergence, more of like a consensus on how we do things. And the really cool thing is that here we kind of take not only the technical leads opinion, but we also kind of pull opinions across the engineering team say, hey, how do we feel about this? Do we want to kind of converge on these naming conventions like this? Or do we want to converge on organizing data accessors, blah, blah, blah, like this? And so over time, there's less kind of ship as fast as possible, and everyone's responsible for kind of refactoring their code slowly as you go along. And I don't know, I don't know how you guys feel like going across old code. You're just like, oh, God, maybe that doesn't look so great, and our team is experiencing that now. But the really cool thing is that all our engineers kind of what I was talking about earlier, code quality means a lot to us and being able to make our lives easier six months, one year from now. And so just the ongoing kind of rolling refactors has been kind of like a huge game changer for us to make sure that even though we ship quickly, we're kind of headed in the right direction, kind of technically and don't have super old cobwebs that you run across and you're just like, oh no, what does this do?
[ 0:20:22.000 ---> 0:20:51.000 ] Speaker D : Yeah, we've incurred especially around testing a lot of tech debt. But there's also just like old cobwebs that I wrote a year ago, that now, I think especially in the past year or in the past 2022, we've been pushing a lot on the mentality of you have to leave code in a better place than you found it. And if that means spending the extra half a day to write tests or to refactor something or to comment, it better. That's really important going forward. And it's been a big mentality shift for us.
[ 0:20:53.000 ---> 0:21:41.000 ] Speaker F : I have a question that is actually grouping together my own question and a couple from the chat, which is as a founding engineer, maybe what was your experience or what do you think the proper division of responsibility is between writing or participating in a prototype or an MVP versus hiring. And when you do hire, are you looking for kind of rockstar people that far outstrip your own technical abilities but that can restrict their scope or their efforts to a particular part of the product? Are you looking for Generalists that can kind of help out and get the thing off the ground? Are you looking for junior people that can what you can afford? So how do you think about hiring your core people and how do you know when to do that or how to split your focus between getting an MVP off the ground yourself, the prototype versus hiring and getting that?
[ 0:21:41.000 ---> 0:22:46.000 ] Speaker C : I think for us it was oftentimes we just financially couldn't hire more engineers and so that was the balance. A lot of the times is like we would have to go write that stuff, but then later it becomes much more of you have to just spend. I think it's almost easier to go write the thing yourself instead of hiring. You probably need to invest in hiring more earlier than you might want to because it seems so easy to just score the engineer or go hire engineers even though it's not. And then the second half of your question was I think generalists are much better early on. It's just hard, like when you have somebody with deep skills and then suddenly you're like, they're not going to be useful for this feature. You're like, what do I put this person on? In the meantime? Even though I know what our company's priorities are, they're over here. It's probably different for every company. We're a web application, so Generalists are really useful. If you're doing something that's highly specialized, then the answer might be different.
[ 0:22:46.000 ---> 0:25:01.000 ] Speaker B : There yeah, definitely agree. There we always joke about how one of our more senior engineers that's really more back end focused had to write react code during some of the earlier days. So when you're thinking about technical hiring, it's kind of all the different things that we've been talking about before, that your role is more than just sitting down and writing code even though that's like 90% of your role. And I think Generalists are kind of what startups need in the beginning but kind of not. Generalists is kind of a misnomer. I would say everyone kind of has their own specialty and kind of what their past experience brings. And so kind of piecing that together. But making sure that they know I see is the main thing that their role will be and that they may have to touch all parts of the stack so very early on, before the first five engineers. You're not going to want to hire someone who says, I don't want to touch the front end at all just because you're so short staffed. You have to. There's no other way for us to move forward. And so I think it's all about being fluid in the beginning. And as the team kind of builds out, you can see, oh, we're kind of missing someone who has a lot more of experience, kind of in the front end, kind of at a larger product level and things like that. Or, oh, we're missing a very heavy back and print kind of that's how as you grow up the team, or if you think, oh, this person is really into documentation or something like that, you kind of assess the team as a whole holistically to see kind of where we can skill up by adding another person. Because it's all also about kind of knowledge dissemination. In the early days, it's like once one person is really good at something, it brings up everybody's skill level.
[ 0:25:01.000 ---> 0:25:05.000 ] Speaker G : Have a question for Gar? I don't know if it's pronounced like that.
[ 0:25:05.000 ---> 0:25:05.000 ] Speaker C : Gar?
[ 0:25:05.000 ---> 0:25:06.000 ] Speaker B : Yeah.
[ 0:25:07.000 ---> 0:25:51.000 ] Speaker G : I'm also a founder, engineer, and a YC startup, but I'm also kind of like first hire. So I have a question for you that, you know, I'm more like at scale. And do you have faced some part when you decided to, I don't know, should I continue coding or should I move into more management role or product role? How do you face that kind of decision with the founders or just knowing where do you fit in? Because myself, I also think I'm not the smartest engineer in the room. That's why I hired a lot of people. I'm more like a generalist guy, and I focus more on product. But there's one step where you should decide. So I don't know if you face some kind of situation like that.
[ 0:25:52.000 ---> 0:25:58.000 ] Speaker C : Yeah, I think if I understood the question correctly, was it kind of like, how did I decide to move into.
[ 0:25:58.000 ---> 0:26:07.000 ] Speaker G : The if you face that part, you are coding or you should move more into more management or product side?
[ 0:26:07.000 ---> 0:26:54.000 ] Speaker C : Yeah, I think there's like two things that influence the decision for me is, like, what's best for me and what's best for the company. And in both cases, the answer was for me to move into this management position. I didn't think there was anybody else that was excited about doing it. And then it's also a skill set that I really want to build. I know it will be useful for me. I know that coding is much easier because I've just done software engineering for so long, whereas it was kind of my first opportunity to really take on a manager role. But it's an invaluable skill set, but it's not necessarily one that everybody wants to or wants to build. So I think the question kind of comes down to what do you want to do with your like, is that something that's kind of setting you up for where you want to go?
[ 0:26:55.000 ---> 0:26:57.000 ] Speaker B : Awesome. Thank you.
[ 0:26:57.000 ---> 0:27:02.000 ] Speaker C : I don't know if Jen or Jordan want to chime in on that also or if they have thoughts about that.
[ 0:27:04.000 ---> 0:27:57.000 ] Speaker B : I actually talked about this to one of our more senior engineers and their take was if you're not opposed to it or you're unsure, just try everything once, see how you like it. I think, at least here at Finley. The nice thing is that, one, we have to think of what's best for the business, and two, if you have open dialogue with whoever the manager is or the CTO or whatever, and saying, I want to try this. Out, but I'm not sure if I want to stay in this role. Like, kind of having that expectation up front and having kind of like that two way street conversation so that if you end up not liking it, you want to really go back to mostly IC. That door is there. So I think it's always like open communication with what your career aspirations are will really help shape that conversation.
[ 0:27:58.000 ---> 0:28:34.000 ] Speaker G : Yeah, I think one of the kind of decisions people see that you're the founding engineer, you're the first hire, you should be the CTO. I don't even see myself being the CTO. I just like moving more. Like, I like more product, I think I can code and I have those skills, but I think I like more products and I have more decisions. I want to have more impact on that area and I think a lot of people will misunderstand the founding in your role with CTO and also in different stage of the startup. So I think it's like, yeah, open communication is really helping with the founders or the team to shape that role.
[ 0:28:34.000 ---> 0:29:09.000 ] Speaker D : Yeah. And I think that's the big differentiator between a startup and when a startup kind of starts to move away from being a startup and become an established company or whatever you call it. Next where I feel like that open communication and flexibility of role. And that idea of like, oh, I just want to try this. It can still be there, but it might be harder, or it might be, like, a couple more hoops, or there might be more kind of explanation if you ever decide to go back on that. And I think it's an important mentality or an important culture to keep.
[ 0:29:10.000 ---> 0:30:13.000 ] Speaker B : I think earlier you mentioned someone asked how do you choose what startup to join as an earlier engineer? And I think that's one of the things that is really high on the list for me is kind of this open communication that we're talking about. Because if you're comfortable with the people that you work with and I mean, this definitely depends on your personality. If you don't care about this stuff, then it's not going to affect you. But for me, having open communication, making sure that my manager or whoever I'm working with knows what my kind of personal goals are and how they align with the business in kind of feeling that out when you're meeting them for the first time, seeing if there's a lot of open communication and transparency even through the. Hiring process I think helps you choose kind of the clear winners outside of the other due diligence. You should see if you even think there's good product, et cetera, et cetera.
[ 0:30:14.000 ---> 0:30:20.000 ] Speaker A : Maybe building off of that. I know that people are interested in hearing about why you decided to work at the company that you joined.
[ 0:30:20.000 ---> 0:31:03.000 ] Speaker B : So I'm someone who, when I first start something, just I research everything. So I read all the blog posts, I watch all the YouTube videos, I get really intense. And then my family usually tells me, hey, you should probably cool it a little was when I was starting to get in the different offers that I got from different startups. You have your gut feeling. And then I also had this Excel spreadsheet that kind of plugging in the numbers, grading the things on different things as culture fit, blah, blah, blah, giving them numbers. And for me, I think.
[ 0:31:05.000 ---> 0:31:06.000 ] Speaker A : The biggest.
[ 0:31:07.000 ---> 0:32:41.000 ] Speaker B : Advice I got from kind of I had a family member who had been an engineer for quite a while and they had worked for startups that got successfully acquired by Google and stuff like that. And I was like, hey, how can you tell if a company is great to join or not? And he was like, do you want me to give you the fluffy answer or do you want me to give you the real answer? And his answer was basically like, you don't know. You may think a product is amazing, but it's going to fail. He's like, you really only have like a one in five chance that a company will be there two years from now after you join, if you join so early on. He's like, honestly, the thing that you should think about is, do you like the people that you're going to work with? Because that's really kind of going to shape the culture of the whole company and happy people make a successful company, at least in his opinion. And so if you hate your life, you're not going to be putting out your best work. You're not going to want to show up every day and kind of hang out with your coworkers to kind of really kind of talk about the product really deeply. It's not going to be exciting. And so all the other things that blog posts say, you should ask them all of these business questions and things like that. I think one of the things that kind of gets put in the wayside a little bit, but maybe should be a little bit more forefront is like, do you even like who you're going to be working with?
[ 0:32:42.000 ---> 0:33:24.000 ] Speaker D : Yeah. When I interviewed, my interview was mostly just I spent the day talking with, working with the four or five people at the company at the time and there were tons of cool kind of performance questions and interesting issues of scalability that excited me about Xflow. But also I kind of just did that math of like, if I'm going to be working like twelve hour days, whatever, seven days a week, am I going to like these people I'm working with? And there was no doubt in my mind that I'm fine to spend two or three years in the battle trenches with these people. And that's kind of like the decision you have to go with, I think.
[ 0:33:24.000 ---> 0:33:39.000 ] Speaker C : Yeah. Plus one too, having a team, I mean, I knew one of the people before I joined and so that was a big part of my decision to join the startup I'm at. It'd be really tough to work with a team where you didn't like anybody.
[ 0:33:41.000 ---> 0:34:34.000 ] Speaker B : Yeah. I think the other big thing, it's like what I really focused on, too, was asking questions around how do you view constructive criticism or how do you view differing opinions in your ideal world when you have a whole team of engineers and everyone has kind of something to say, what do you think about that? And how would you deal with something like that? Because I think that's, like, a reality early on that you face is that, yeah, we have a lot of different competing things, competing directions. Like, how do you synthesize that all? How you kind of make sure that kind of ego is left at the door and kind of everyone has a seat at the table to make sure that we make the best product, not the best product that this person thinks is the best product or the best product that this person thinks is the best product.
[ 0:34:35.000 ---> 0:35:12.000 ] Speaker D : Yeah, I feel like the scariest thing in these first couple of years of being at the startup, the scariest thing is blame. It's like when something goes wrong, is your company going to find the person who pushed the commit or find the person who okayed the test and be like, hey, why did this happen? Or is it going to be like the team coming together and be like, we all let this through, so how can we make that not happen? And it ties right hand in hand with like, you need to not have a blameful culture or the startup is not going to be a good place to work.
[ 0:35:12.000 ---> 0:35:25.000 ] Speaker A : Gar, you had mentioned that you knew one of the founders of the company that you joined for the other two of you and maybe also for Gar. How did you find this company originally or did they find you?
[ 0:35:25.000 ---> 0:35:58.000 ] Speaker C : I can go first, even though I think it's probably more Jen and Jordan's answer might be more real. So I had worked with one of the founders, Samir, at Google, and he actually tried to get me to join his first startup. They did right afterwards, and of course that one failed like so many do, and the timing just wasn't right for me. But then when he reached out right after Cambly had finished Y Combinator and asked me to join the timing was great for so I was really excited to work with him again. He was great to work with at Google and he's been great to work with at Cambly too.
[ 0:36:00.000 ---> 0:37:12.000 ] Speaker B : I decided I want to work at a startup or just somewhere where I would have a lot of hands on experience and a lot of different things and so I think I Googled, where do I apply to startup jobs or something like that. And then I knew about YCOM near too and I ended up finding work at a startup. This was, like, in my mode, where I was like, all right, let's apply to all jobs known to man kind of mode, because I wanted to be more product focused versus doing consulting and yeah, the funny thing is work at a startup. If you really fill out your profile in earnest and do it well, kind of put yourself, your personality and everything into it, I was very surprised that in less than 24 hours I had a bunch of people DMing me and messaging me on work at a startup. So it's a very active job platform and yeah, that's how I end up connecting with current company. It's just like a cold DM from one of our founders like, hey, you seem like you'd be a good fit here.
[ 0:37:12.000 ---> 0:38:03.000 ] Speaker D : Yeah, I feel like my story is I feel like less relevant for the panel because I really honestly wasn't looking for especially such an early stage startup when I was looking for jobs. And it's super heartening in hindsight to learn about stuff like YC, and work at a startup and all these places that are so good for this. I was definitely looking for somewhere where I could be like an early engineer, but maybe like a 50 person engineering team around that size. And then I just happened to I had the CTO reached out to a friend asking them if they wanted a job. They knew I was looking for a job and kind of figured I would be a good fit, so they set it up and I was like, okay, I'm willing enough to see what this is like and take the interview and just kind of got really excited after that.
[ 0:38:03.000 ---> 0:38:21.000 ] Speaker C : We've hired a few people off of work at a startup and they've been great hires. I feel like we watch that forum very closely for anybody that seems like they'd be a good candidate or good fit and yeah, I would say for anybody that's looking that. I've also told other friends that aren't interested in necessarily joining Cambly post on.
[ 0:38:21.000 ---> 0:38:41.000 ] Speaker A : Work at a startup and then going off of what you had kind of mentioned Jordan, that you were looking for a larger, slightly larger company. People have been asking questions about weighing compensation when choosing to work at a startup or working at a bigger company. Anyone have thoughts on that? I know it's kind of a broad.
[ 0:38:41.000 ---> 0:38:41.000 ] Speaker B : Topic.
[ 0:38:43.000 ---> 0:39:28.000 ] Speaker D : You said going off of me. So I feel like I'm kind of on deck to answer. I don't necessarily have kind of like the best suggestion for how to weigh that. I don't know. It's a tough thing. At some point you have to view a startup as being incredibly calculated risk, not just in terms of like I could work here for six months and it could be could fold after that, but also I'm going to take less compensation. And it's that hope that the experience you get not just like technical experience but holistic, just like the fun that you have is worth kind of all the other compensation that you might lose. I know that's not concrete advice, but that's kind of the best I got in my experience.
[ 0:39:30.000 ---> 0:41:10.000 ] Speaker B : In this last job hunt, I had applied to lots of different startups and kind of they were at many different phases. It was like pre series A, series A, series B series, C series, like I don't even know how many. And I would say that there's actually at least for kind of the talks that I was in and maybe because I'm kind of lower in years of experience for engineering, it seems like compensation for earlier career engineers it doesn't really technically have to do with at what stage the company is at. So it really depends on kind of what the founders and stuff kind of or just what the company is kind of willing are they willing to pay what other larger companies are willing to pay. And so I just want to say that just because it's a smaller company doesn't mean you're going to be compensated worse than a larger company. You might lose out on perks like, oh, I don't know, like gym membership or things like that. But if you tally up kind of like the monetary value of a lot of these things, maybe you're missing out on less than ten k or something like that. So if the experience is really valuable to you, and I know for some people saying, oh, it's just ten k, that's ten k, it's totally different. So everyone's financial place is very different. But if that number doesn't matter as much to you, at least from my experience, kind of just because it's a smaller company, I was very happy with the compensation that I got.
[ 0:41:11.000 ---> 0:41:21.000 ] Speaker C : Yeah, I think for me the experience was kind of like the dominant factor of why I made the choice I did. And so yeah.
[ 0:41:26.000 ---> 0:41:27.000 ] Speaker G : I think that made.
[ 0:41:27.000 ---> 0:41:49.000 ] Speaker C : The choice much very easy for me. And I look back and I totally think that was the right call to value the experience above all other things, especially if you're really early on in your career, we all talk about, explore, exploit, that's the time to be valuing the experience higher if you can.
[ 0:41:50.000 ---> 0:42:17.000 ] Speaker A : So another topic that came up in the questions is around mentorship as well as just like developing technical skills. So as a technical person. When you join a smaller company, I think the expectation is that there aren't as many people there who can mentor you or kind of serve as a technical mentor as well to kind of help you with your skills. What was your experience like joining a startup and thinking about your technical development?
[ 0:42:17.000 ---> 0:43:03.000 ] Speaker B : I guess I can go first. I think the cool thing here is that even as one of the more junior engineers in terms of years of experience on this team, I still kind of get invited to interview new candidates. And their take is that they want everyone's opinion on growing the team. And especially for me, would I want to learn from this person or would I feel comfortable working with this person? Because it wouldn't just be kind of like a top down approach. It would be like a two way street kind of thing. And so at least that's what I find really cool and what has worked really well for us.
[ 0:43:04.000 ---> 0:44:12.000 ] Speaker D : Yeah, I think including everything or including everyone on everything, or at least making people optional, is pretty huge. I also think that we took a lot of responsibility to take on that mentorship ourselves. I didn't have that much React experience. We have a front end engineer. He would make pull requests. How can I do code review and how can that code review, a be accurate, and B help him grow? And the answer is if I just ask a million questions on the PR of why is this? This doesn't make sense to me, but I don't know why. And even if I'm wrong on every single point, he's getting the sanity check. So it's good code review. And then I'm getting to learn, like, oh, this is why things happen like this in React. And then the next PR, hopefully I'm able to ask fewer questions or more targeted questions. And then a month down the road, because we've been working together so much in this way and he's been mentoring me just by the virtue of writing code, I've become a stronger React engineer. And his React code is hopefully somewhat better.
[ 0:44:12.000 ---> 0:44:45.000 ] Speaker C : Yeah, I think I had a very similar experience where we weren't necessarily experts. None of us at Cambly had written React, and we just kind of had to figure it out ourselves. But through good code reviews and a lot of talking back and forth, we became experts in React. I think the way you grow is different. You don't have the person that's like, I've been writing it for so much longer than you, so I can help you come to speed on it. You have coworkers that hold you accountable to learning it and becoming an expert in it through your own self driven study.
[ 0:44:45.000 ---> 0:44:57.000 ] Speaker D : Yeah. And even if you think you are that expert, someone asks, oh, why did you do it like this? And you're like, oh, shoot, I actually have no idea. And then boom, suddenly the expert has learned something.
[ 0:44:57.000 ---> 0:45:45.000 ] Speaker B : Yeah, I think mentorship, at least earlier on, when your company size is small, instead of the word mentorship, I would use more like knowledge sharing, because it kind of ends up being more like there's not like this, the one god engineer that knows all. That's not really how it works. And so everyone kind of shares a piece of what they've learned so far and the context or any trouble, like, oh, yeah, don't do it this way, because this and this, and, oh, yeah, this is the better way to do it because of this, this, and this. And so just like knowledge sharing, the context makes everyone kind of skill up technically. So I have a question for Paige. Sure.
[ 0:45:47.000 ---> 0:45:48.000 ] Speaker F : You work at YC, so you've seen.
[ 0:45:49.000 ---> 0:45:54.000 ] Speaker B : A lot of founding engineers. Can you maybe share what are some good qualities and bad qualities of a founding engineer?
[ 0:45:55.000 ---> 0:46:53.000 ] Speaker A : I think this question was kind of answered, and I also welcome the panel to chime in, too. I think the biggest thing is adaptability as a positive trait. As you kind of gathered from what they shared earlier in the talk, they didn't do just one thing. So you might be hired to do a specific thing, and you probably do need a technical skill set in whatever the company is currently doing. But being able to do more than just write code in that one specific language or for that one specific use case is really important. And I think just in terms of negative characteristics or things that might be a deterrent is if the person has no interest in doing anything outside of just one thing specifically. Still pretty broad, but I think that's kind of been echoed throughout the answers. So, from the panelists, any final words of wisdom for the audience as we wrap up?
[ 0:46:53.000 ---> 0:47:35.000 ] Speaker B : If you want to be a founding engineer, being a founding engineer is more than just engineering. I would say that really do some introspection to see kind of what your strengths are outside of engineering, because your company, if you decide to join early, is heavily going to rely on those skills. So always kind of make sure when you're interviewing, emphasize those other things other than your technical experience as well, because that's really what might differentiate you between other candidates other than your lengthy list of technical skills and experience.
[ 0:47:36.000 ---> 0:48:09.000 ] Speaker D : Yeah, I think at the end of the day, it's one of those no plan, survives contact with the enemy kind of things, where you can have the longest resume, but every challenge is going to be thrown at you, and so much is going to go wrong or go sideways or not go how you planned. And it's all about kind of how you respond to that. And that more, I think, comes from your character and the people around you and the trust everyone has in each other more than any experience you've had on your resume.
[ 0:48:09.000 ---> 0:48:24.000 ] Speaker C : Yeah, and maybe I'll just reiterate one other thing from earlier, was the ability to launch quickly and not be afraid to throw things away. And sometimes you'll have to write some code that you're not particularly proud of to test a hypothesis quickly.
[ 0:48:28.000 ---> 0:48:34.000 ] Speaker B : You close.
